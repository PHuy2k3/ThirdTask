{"ast":null,"code":"var _import$meta;\n// src/lib/api.js\nimport axios from \"axios\";\nconst ENV_BASE = ((_import$meta = import.meta) === null || _import$meta === void 0 ? void 0 : _import$meta.env) && import.meta.env.VITE_API_BASE || typeof process !== \"undefined\" && process.env.REACT_APP_API_BASE || \"http://localhost:5088\" || \"https://localhost:7060\";\n\n/* -------------------- Utils -------------------- */\nexport function normalizeBase(raw) {\n  const s = (raw || \"\").trim().replace(/\\/+$/, \"\");\n  try {\n    const u = new URL(s);\n    // Auto-fix: nếu ai đó gõ nhầm https cho cổng 5088 (HTTP)\n    if (u.hostname === \"localhost\" && u.port === \"5088\") u.protocol = \"http:\";\n    return u.toString().replace(/\\/+$/, \"\");\n  } catch {\n    return s;\n  }\n}\nexport const buildQuery = obj => {\n  const q = Object.entries(obj !== null && obj !== void 0 ? obj : {}).filter(([, v]) => v !== undefined && v !== null && v !== \"\").map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join(\"&\");\n  return q ? `?${q}` : \"\";\n};\n\n/* -------------------- Axios helpers -------------------- */\nexport function getAxiosMessage(err, fallback = \"Request failed\") {\n  var _err$response, _err$response$data, _err$response2, _err$response2$data, _err$response3, _err$response3$data, _err$response4, _err$response4$data;\n  if (!err) return fallback;\n  return (err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || (err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || (err === null || err === void 0 ? void 0 : (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.title) || (err === null || err === void 0 ? void 0 : (_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.detail) || (err === null || err === void 0 ? void 0 : err.message) || fallback;\n}\n\n/**\r\n * http(baseUrl, path, init?)\r\n *  - Dùng axios bên trong.\r\n *  - Vẫn tương thích: cho phép truyền init.body (string hoặc object) như bạn đã dùng.\r\n *  - Cũng hỗ trợ init.data (chuẩn axios).\r\n *  - Hỗ trợ init.timeout (ms), init.headers, init.method, init.silent\r\n */\nexport const http = async (baseUrl, path, init = {}) => {\n  const baseURL = normalizeBase(baseUrl || ENV_BASE);\n  const url = path; // axios sẽ ghép baseURL + url\n  const method = (init.method || \"GET\").toUpperCase();\n  const timeout = typeof init.timeout === \"number\" ? init.timeout : 15000;\n  const silent = !!init.silent;\n\n  // Chuẩn hoá headers\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    ...(init.headers || {})\n  };\n\n  // Tương thích: ưu tiên init.data (axios style), nếu không có thì lấy từ init.body\n  let data = init.data;\n  if (data === undefined && init.body !== undefined) {\n    try {\n      data = typeof init.body === \"string\" ? JSON.parse(init.body) : init.body;\n    } catch {\n      data = init.body; // nếu không parse được, gửi nguyên\n    }\n  }\n  try {\n    var _res$data;\n    const res = await axios.request({\n      baseURL,\n      url,\n      method,\n      headers,\n      data,\n      timeout,\n      withCredentials: false\n      // params: bạn có thể dùng buildQuery trước đó nên không set ở đây\n    });\n    if (!silent) {\n      console.log(\"[AXIOS RES]\", {\n        data: res.data,\n        status: res.status,\n        statusText: res.statusText,\n        headers: res.headers,\n        config: {\n          url: `${baseURL}${url}`,\n          method,\n          headers\n        },\n        request: {\n          url: `${baseURL}${url}`\n        }\n      });\n    }\n\n    // Trả về data để code hiện tại không phải đổi\n    return (_res$data = res.data) !== null && _res$data !== void 0 ? _res$data : null;\n  } catch (err) {\n    const msg = getAxiosMessage(err);\n    if (!silent) {\n      var _err$response5, _err$response6;\n      console.error(\"[API ERR]\", method, `${baseURL}${url}`, (err === null || err === void 0 ? void 0 : (_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : _err$response5.status) || \"\", msg, {\n        code: err === null || err === void 0 ? void 0 : err.code,\n        data: err === null || err === void 0 ? void 0 : (_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : _err$response6.data\n      });\n    }\n    throw err; // ném axios error để bạn bắt như trước\n  }\n};\n\n/* -------------------- Test connection -------------------- */\nexport const testConnection = async baseUrl => {\n  const root = normalizeBase(baseUrl || ENV_BASE);\n  const candidates = [\"/api/health\", \"/swagger/v1/swagger.json\", \"/api/categories?page=1&size=1\"];\n  for (const p of candidates) {\n    try {\n      const r = await axios.get(`${root}${p}`, {\n        timeout: 5000\n      });\n      if (r.status >= 200 && r.status < 300) return {\n        ok: true,\n        url: `${root}${p}`\n      };\n    } catch {}\n  }\n  return {\n    ok: false,\n    baseUrl: root,\n    error: \"Cannot reach API\"\n  };\n};","map":{"version":3,"names":["axios","ENV_BASE","_import$meta","import","meta","env","VITE_API_BASE","process","REACT_APP_API_BASE","normalizeBase","raw","s","trim","replace","u","URL","hostname","port","protocol","toString","buildQuery","obj","q","Object","entries","filter","v","undefined","map","k","encodeURIComponent","join","getAxiosMessage","err","fallback","_err$response","_err$response$data","_err$response2","_err$response2$data","_err$response3","_err$response3$data","_err$response4","_err$response4$data","response","data","message","error","title","detail","http","baseUrl","path","init","baseURL","url","method","toUpperCase","timeout","silent","headers","body","JSON","parse","_res$data","res","request","withCredentials","console","log","status","statusText","config","msg","_err$response5","_err$response6","code","testConnection","root","candidates","p","r","get","ok"],"sources":["D:/CMC_Task/third-task/fe/category/src/lib/api.js"],"sourcesContent":["// src/lib/api.js\r\nimport axios from \"axios\";\r\n\r\nconst ENV_BASE =\r\n  (import.meta?.env && import.meta.env.VITE_API_BASE) ||\r\n  (typeof process !== \"undefined\" && process.env.REACT_APP_API_BASE) ||\r\n  \"http://localhost:5088\" || \"https://localhost:7060\";\r\n\r\n/* -------------------- Utils -------------------- */\r\nexport function normalizeBase(raw) {\r\n  const s = (raw || \"\").trim().replace(/\\/+$/, \"\");\r\n  try {\r\n    const u = new URL(s);\r\n    // Auto-fix: nếu ai đó gõ nhầm https cho cổng 5088 (HTTP)\r\n    if (u.hostname === \"localhost\" && u.port === \"5088\") u.protocol = \"http:\";\r\n    return u.toString().replace(/\\/+$/, \"\");\r\n  } catch {\r\n    return s;\r\n  }\r\n}\r\n\r\nexport const buildQuery = (obj) => {\r\n  const q = Object.entries(obj ?? {})\r\n    .filter(([, v]) => v !== undefined && v !== null && v !== \"\")\r\n    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\r\n    .join(\"&\");\r\n  return q ? `?${q}` : \"\";\r\n};\r\n\r\n/* -------------------- Axios helpers -------------------- */\r\nexport function getAxiosMessage(err, fallback = \"Request failed\") {\r\n  if (!err) return fallback;\r\n  return (\r\n    err?.response?.data?.message ||\r\n    err?.response?.data?.error ||\r\n    err?.response?.data?.title ||\r\n    err?.response?.data?.detail ||\r\n    err?.message ||\r\n    fallback\r\n  );\r\n}\r\n\r\n/**\r\n * http(baseUrl, path, init?)\r\n *  - Dùng axios bên trong.\r\n *  - Vẫn tương thích: cho phép truyền init.body (string hoặc object) như bạn đã dùng.\r\n *  - Cũng hỗ trợ init.data (chuẩn axios).\r\n *  - Hỗ trợ init.timeout (ms), init.headers, init.method, init.silent\r\n */\r\nexport const http = async (baseUrl, path, init = {}) => {\r\n  const baseURL = normalizeBase(baseUrl || ENV_BASE);\r\n  const url = path; // axios sẽ ghép baseURL + url\r\n  const method = (init.method || \"GET\").toUpperCase();\r\n  const timeout = typeof init.timeout === \"number\" ? init.timeout : 15000;\r\n  const silent = !!init.silent;\r\n\r\n  // Chuẩn hoá headers\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    ...(init.headers || {}),\r\n  };\r\n\r\n  // Tương thích: ưu tiên init.data (axios style), nếu không có thì lấy từ init.body\r\n  let data = init.data;\r\n  if (data === undefined && init.body !== undefined) {\r\n    try {\r\n      data = typeof init.body === \"string\" ? JSON.parse(init.body) : init.body;\r\n    } catch {\r\n      data = init.body; // nếu không parse được, gửi nguyên\r\n    }\r\n  }\r\n\r\n  try {\r\n    const res = await axios.request({\r\n      baseURL,\r\n      url,\r\n      method,\r\n      headers,\r\n      data,\r\n      timeout,\r\n      withCredentials: false,\r\n      // params: bạn có thể dùng buildQuery trước đó nên không set ở đây\r\n    });\r\n\r\n    if (!silent) {\r\n      console.log(\"[AXIOS RES]\", {\r\n        data: res.data,\r\n        status: res.status,\r\n        statusText: res.statusText,\r\n        headers: res.headers,\r\n        config: { url: `${baseURL}${url}`, method, headers },\r\n        request: { url: `${baseURL}${url}` },\r\n      });\r\n    }\r\n\r\n    // Trả về data để code hiện tại không phải đổi\r\n    return res.data ?? null;\r\n  } catch (err) {\r\n    const msg = getAxiosMessage(err);\r\n    if (!silent) {\r\n      console.error(\r\n        \"[API ERR]\",\r\n        method,\r\n        `${baseURL}${url}`,\r\n        err?.response?.status || \"\",\r\n        msg,\r\n        { code: err?.code, data: err?.response?.data }\r\n      );\r\n    }\r\n    throw err; // ném axios error để bạn bắt như trước\r\n  }\r\n};\r\n\r\n/* -------------------- Test connection -------------------- */\r\nexport const testConnection = async (baseUrl) => {\r\n  const root = normalizeBase(baseUrl || ENV_BASE);\r\n  const candidates = [\"/api/health\", \"/swagger/v1/swagger.json\", \"/api/categories?page=1&size=1\"];\r\n  for (const p of candidates) {\r\n    try {\r\n      const r = await axios.get(`${root}${p}`, { timeout: 5000 });\r\n      if (r.status >= 200 && r.status < 300) return { ok: true, url: `${root}${p}` };\r\n    } catch {}\r\n  }\r\n  return { ok: false, baseUrl: root, error: \"Cannot reach API\" };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}