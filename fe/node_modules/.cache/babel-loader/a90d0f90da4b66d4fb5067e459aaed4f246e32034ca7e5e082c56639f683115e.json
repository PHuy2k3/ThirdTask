{"ast":null,"code":"var _import$meta;\n// src/lib/api.js\nconst ENV_BASE = ((_import$meta = import.meta) === null || _import$meta === void 0 ? void 0 : _import$meta.env) && import.meta.env.VITE_API_BASE || typeof process !== \"undefined\" && process.env.REACT_APP_API_BASE || \"https://localhost:5088\";\nexport const http = async (baseUrl, path, init = {}) => {\n  const root = baseUrl || ENV_BASE;\n  const url = `${root}${path}`;\n  const res = await fetch(url, {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...(init.headers || {})\n    },\n    ...init\n  });\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(text || res.statusText);\n  }\n  return res.status === 204 ? null : res.json();\n};\nexport const buildQuery = obj => {\n  const q = Object.entries(obj).filter(([, v]) => v !== undefined && v !== null && v !== \"\").map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join(\"&\");\n  return q ? `?${q}` : \"\";\n};\nexport const testConnection = async baseUrl => {\n  const root = baseUrl || ENV_BASE;\n  const candidates = [\"/api/health\", \"/health\", \"/swagger/v1/swagger.json\", \"/api/categories?page=1&size=1\"];\n  for (const p of candidates) {\n    try {\n      const r = await fetch(`${root}${p}`, {\n        mode: \"cors\"\n      });\n      if (r.ok) return {\n        ok: true,\n        url: `${root}${p}`\n      };\n    } catch {}\n  }\n  return {\n    ok: false,\n    baseUrl: root,\n    error: \"Cannot reach API\"\n  };\n};","map":{"version":3,"names":["ENV_BASE","_import$meta","import","meta","env","VITE_API_BASE","process","REACT_APP_API_BASE","http","baseUrl","path","init","root","url","res","fetch","mode","headers","ok","text","Error","statusText","status","json","buildQuery","obj","q","Object","entries","filter","v","undefined","map","k","encodeURIComponent","join","testConnection","candidates","p","r","error"],"sources":["D:/CMC_Task/third-task/fe/category/src/lib/api.js"],"sourcesContent":["// src/lib/api.js\r\nconst ENV_BASE =\r\n  (import.meta?.env && import.meta.env.VITE_API_BASE) ||\r\n  (typeof process !== \"undefined\" && process.env.REACT_APP_API_BASE) ||\r\n  \"https://localhost:5088\";\r\n\r\nexport const http = async (baseUrl, path, init = {}) => {\r\n  const root = baseUrl || ENV_BASE;\r\n  const url = `${root}${path}`;\r\n  const res = await fetch(url, {\r\n    mode: \"cors\",\r\n    headers: { \"Content-Type\": \"application/json\", ...(init.headers || {}) },\r\n    ...init,\r\n  });\r\n  if (!res.ok) {\r\n    const text = await res.text();\r\n    throw new Error(text || res.statusText);\r\n  }\r\n  return res.status === 204 ? null : res.json();\r\n};\r\n\r\nexport const buildQuery = (obj) => {\r\n  const q = Object.entries(obj)\r\n    .filter(([, v]) => v !== undefined && v !== null && v !== \"\")\r\n    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\r\n    .join(\"&\");\r\n  return q ? `?${q}` : \"\";\r\n};\r\n\r\nexport const testConnection = async (baseUrl) => {\r\n  const root = baseUrl || ENV_BASE;\r\n  const candidates = [\r\n    \"/api/health\",\r\n    \"/health\",\r\n    \"/swagger/v1/swagger.json\",\r\n    \"/api/categories?page=1&size=1\",\r\n  ];\r\n  for (const p of candidates) {\r\n    try {\r\n      const r = await fetch(`${root}${p}`, { mode: \"cors\" });\r\n      if (r.ok) return { ok: true, url: `${root}${p}` };\r\n    } catch {}\r\n  }\r\n  return { ok: false, baseUrl: root, error: \"Cannot reach API\" };\r\n};\r\n"],"mappings":";AAAA;AACA,MAAMA,QAAQ,GACX,EAAAC,YAAA,GAAAC,MAAM,CAACC,IAAI,cAAAF,YAAA,uBAAXA,YAAA,CAAaG,GAAG,KAAIF,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,aAAa,IACjD,OAAOC,OAAO,KAAK,WAAW,IAAIA,OAAO,CAACF,GAAG,CAACG,kBAAmB,IAClE,wBAAwB;AAE1B,OAAO,MAAMC,IAAI,GAAG,MAAAA,CAAOC,OAAO,EAAEC,IAAI,EAAEC,IAAI,GAAG,CAAC,CAAC,KAAK;EACtD,MAAMC,IAAI,GAAGH,OAAO,IAAIT,QAAQ;EAChC,MAAMa,GAAG,GAAG,GAAGD,IAAI,GAAGF,IAAI,EAAE;EAC5B,MAAMI,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC3BG,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;MAAE,cAAc,EAAE,kBAAkB;MAAE,IAAIN,IAAI,CAACM,OAAO,IAAI,CAAC,CAAC;IAAE,CAAC;IACxE,GAAGN;EACL,CAAC,CAAC;EACF,IAAI,CAACG,GAAG,CAACI,EAAE,EAAE;IACX,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACK,IAAI,CAAC,CAAC;IAC7B,MAAM,IAAIC,KAAK,CAACD,IAAI,IAAIL,GAAG,CAACO,UAAU,CAAC;EACzC;EACA,OAAOP,GAAG,CAACQ,MAAM,KAAK,GAAG,GAAG,IAAI,GAAGR,GAAG,CAACS,IAAI,CAAC,CAAC;AAC/C,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIC,GAAG,IAAK;EACjC,MAAMC,CAAC,GAAGC,MAAM,CAACC,OAAO,CAACH,GAAG,CAAC,CAC1BI,MAAM,CAAC,CAAC,GAAGC,CAAC,CAAC,KAAKA,CAAC,KAAKC,SAAS,IAAID,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAK,EAAE,CAAC,CAC5DE,GAAG,CAAC,CAAC,CAACC,CAAC,EAAEH,CAAC,CAAC,KAAK,GAAGI,kBAAkB,CAACD,CAAC,CAAC,IAAIC,kBAAkB,CAACJ,CAAC,CAAC,EAAE,CAAC,CACpEK,IAAI,CAAC,GAAG,CAAC;EACZ,OAAOT,CAAC,GAAG,IAAIA,CAAC,EAAE,GAAG,EAAE;AACzB,CAAC;AAED,OAAO,MAAMU,cAAc,GAAG,MAAO3B,OAAO,IAAK;EAC/C,MAAMG,IAAI,GAAGH,OAAO,IAAIT,QAAQ;EAChC,MAAMqC,UAAU,GAAG,CACjB,aAAa,EACb,SAAS,EACT,0BAA0B,EAC1B,+BAA+B,CAChC;EACD,KAAK,MAAMC,CAAC,IAAID,UAAU,EAAE;IAC1B,IAAI;MACF,MAAME,CAAC,GAAG,MAAMxB,KAAK,CAAC,GAAGH,IAAI,GAAG0B,CAAC,EAAE,EAAE;QAAEtB,IAAI,EAAE;MAAO,CAAC,CAAC;MACtD,IAAIuB,CAAC,CAACrB,EAAE,EAAE,OAAO;QAAEA,EAAE,EAAE,IAAI;QAAEL,GAAG,EAAE,GAAGD,IAAI,GAAG0B,CAAC;MAAG,CAAC;IACnD,CAAC,CAAC,MAAM,CAAC;EACX;EACA,OAAO;IAAEpB,EAAE,EAAE,KAAK;IAAET,OAAO,EAAEG,IAAI;IAAE4B,KAAK,EAAE;EAAmB,CAAC;AAChE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}