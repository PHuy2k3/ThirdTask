{"ast":null,"code":"var _import$meta;\n// src/lib/api.js\nconst ENV_BASE = ((_import$meta = import.meta) === null || _import$meta === void 0 ? void 0 : _import$meta.env) && import.meta.env.VITE_API_BASE || typeof process !== \"undefined\" && process.env.REACT_APP_API_BASE || \"http://localhost:5088\";\nfunction normalizeBase(raw) {\n  const s = (raw || \"\").trim().replace(/\\/+$/, \"\");\n  try {\n    const u = new URL(s);\n    if (u.hostname === \"localhost\" && u.port === \"5088\") u.protocol = \"http:\";\n    return u.toString().replace(/\\/+$/, \"\");\n  } catch {\n    return s;\n  }\n}\nexport const http = async (baseUrl, path, init = {}) => {\n  const root = normalizeBase(baseUrl || ENV_BASE);\n  const url = `${root}${path}`;\n  //   console.log(\"[API] ->\", url);\n  let res;\n  try {\n    res = await fetch(url, {\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(init.headers || {})\n      },\n      ...init\n    });\n  } catch (e) {\n    // Lỗi network (CORS / wrong port / mixed content…)\n    throw new Error(`Network error: ${(e === null || e === void 0 ? void 0 : e.message) || e}`);\n  }\n  if (!res.ok) {\n    const text = await res.text().catch(() => \"\");\n    throw new Error(text || `${res.status} ${res.statusText}`);\n  }\n  return res.status === 204 ? null : res.json();\n};\nexport const buildQuery = obj => {\n  const q = Object.entries(obj !== null && obj !== void 0 ? obj : {}).filter(([, v]) => v !== undefined && v !== null && v !== \"\").map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join(\"&\");\n  return q ? `?${q}` : \"\";\n};\nexport const testConnection = async baseUrl => {\n  const root = normalizeBase(baseUrl || ENV_BASE);\n  const candidates = [\"/api/health\", \"/swagger/v1/swagger.json\", \"/api/categories?page=1&size=1\"];\n  for (const p of candidates) {\n    try {\n      const r = await fetch(`${root}${p}`, {\n        mode: \"cors\"\n      });\n      if (r.ok) return {\n        ok: true,\n        url: `${root}${p}`\n      };\n    } catch {}\n  }\n  return {\n    ok: false,\n    baseUrl: root,\n    error: \"Cannot reach API\"\n  };\n};","map":{"version":3,"names":["ENV_BASE","_import$meta","import","meta","env","VITE_API_BASE","process","REACT_APP_API_BASE","normalizeBase","raw","s","trim","replace","u","URL","hostname","port","protocol","toString","http","baseUrl","path","init","root","url","res","fetch","mode","headers","e","Error","message","ok","text","catch","status","statusText","json","buildQuery","obj","q","Object","entries","filter","v","undefined","map","k","encodeURIComponent","join","testConnection","candidates","p","r","error"],"sources":["D:/CMC_Task/third-task/fe/category/src/lib/api.js"],"sourcesContent":["// src/lib/api.js\r\nconst ENV_BASE =\r\n  (import.meta?.env && import.meta.env.VITE_API_BASE) ||\r\n  (typeof process !== \"undefined\" && process.env.REACT_APP_API_BASE) ||\r\n  \"http://localhost:5088\";\r\n\r\nfunction normalizeBase(raw) {\r\n  const s = (raw || \"\").trim().replace(/\\/+$/, \"\");\r\n  try {\r\n    const u = new URL(s);\r\n    if (u.hostname === \"localhost\" && u.port === \"5088\") u.protocol = \"http:\";\r\n    return u.toString().replace(/\\/+$/, \"\");\r\n  } catch {\r\n    return s;\r\n  }\r\n}\r\n\r\nexport const http = async (baseUrl, path, init = {}) => {\r\n  const root = normalizeBase(baseUrl || ENV_BASE);\r\n  const url = `${root}${path}`;\r\n//   console.log(\"[API] ->\", url);\r\n  let res;\r\n  try {\r\n    res = await fetch(url, {\r\n      mode: \"cors\",\r\n      headers: { \"Content-Type\": \"application/json\", ...(init.headers || {}) },\r\n      ...init,\r\n    });\r\n  } catch (e) {\r\n    // Lỗi network (CORS / wrong port / mixed content…)\r\n    throw new Error(`Network error: ${e?.message || e}`);\r\n  }\r\n  if (!res.ok) {\r\n    const text = await res.text().catch(() => \"\");\r\n    throw new Error(text || `${res.status} ${res.statusText}`);\r\n  }\r\n  return res.status === 204 ? null : res.json();\r\n};\r\n\r\nexport const buildQuery = (obj) => {\r\n  const q = Object.entries(obj ?? {})\r\n    .filter(([, v]) => v !== undefined && v !== null && v !== \"\")\r\n    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\r\n    .join(\"&\");\r\n  return q ? `?${q}` : \"\";\r\n};\r\n\r\nexport const testConnection = async (baseUrl) => {\r\n  const root = normalizeBase(baseUrl || ENV_BASE);\r\n  const candidates = [\"/api/health\", \"/swagger/v1/swagger.json\", \"/api/categories?page=1&size=1\"];\r\n  for (const p of candidates) {\r\n    try {\r\n      const r = await fetch(`${root}${p}`, { mode: \"cors\" });\r\n      if (r.ok) return { ok: true, url: `${root}${p}` };\r\n    } catch {}\r\n  }\r\n  return { ok: false, baseUrl: root, error: \"Cannot reach API\" };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}