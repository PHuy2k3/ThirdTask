{"ast":null,"code":"var _import$meta;\n// src/lib/img.js\nexport const MAX_IMAGEURL = 1024;\nexport const CDN_BASE = ((_import$meta = import.meta) === null || _import$meta === void 0 ? void 0 : _import$meta.env) && import.meta.env.VITE_CDN_BASE || typeof process !== \"undefined\" && process.env.REACT_APP_CDN_BASE || \"\";\n\n/** Nếu link là share của Drive/Dropbox -> đổi sang link trực tiếp xem/ tải */\nfunction smartUnwrapShareUrl(s) {\n  // Google Drive: https://drive.google.com/file/d/<id>/view?usp=sharing\n  const mDrive = s.match(/drive\\.google\\.com\\/file\\/d\\/([^/]+)/i);\n  if (mDrive) return `https://drive.google.com/uc?export=view&id=${mDrive[1]}`;\n\n  // Dropbox: https://www.dropbox.com/s/<id>/file.jpg?dl=0 -> raw\n  if (/^https?:\\/\\/www\\.dropbox\\.com\\//i.test(s)) {\n    return s.replace(\"www.dropbox.com\", \"dl.dropboxusercontent.com\").replace(/(\\?|&)dl=\\d/, \"\");\n  }\n  return s;\n}\n\n/** Chuẩn hoá input để lưu vào DB (string ngắn, không base64, có scheme nếu cần) */\nexport function normalizeImgInput(raw) {\n  if (!raw) return \"\";\n  let s = String(raw).trim();\n  if (!s) return \"\";\n  if (s.length > MAX_IMAGEURL) throw new Error(\"too_long\");\n  if (s.toLowerCase().startsWith(\"data:\")) throw new Error(\"no_data_uri\");\n  if (/^file:|^[a-z]:\\\\|^\\\\\\\\/i.test(s)) throw new Error(\"no_local_path\");\n\n  // protocol-relative => thêm https:\n  if (/^\\/\\//.test(s)) s = \"https:\" + s;\n\n  // nếu đã có scheme (http/https/ftp...) -> giữ (ưu tiên http/https)\n  if (/^[a-z][a-z0-9+.-]*:\\/\\//i.test(s)) {\n    if (!/^https?:\\/\\//i.test(s)) throw new Error(\"unsupported_scheme\");\n    return smartUnwrapShareUrl(s);\n  }\n\n  // domain trần: example.com/abc.jpg -> thêm https://\n  if (/^[\\w.-]+\\.[a-z]{2,}(\\/.*)?$/i.test(s)) return smartUnwrapShareUrl(\"https://\" + s);\n\n  // còn lại coi như đường dẫn tương đối (images/a.jpg)\n  return s.replace(/^\\/+/, \"\"); // bỏ bớt / đầu nếu muốn\n}\n\n/** Ghép link hiển thị (đường dẫn tương đối -> CDN_BASE, còn lại giữ nguyên) */\nexport function resolveImg(u) {\n  if (!u) return \"\";\n  const base = String(CDN_BASE || \"\").replace(/\\/+$/, \"\");\n  try {\n    const url = new URL(u);\n    return url.protocol === \"http:\" || url.protocol === \"https:\" ? u : \"\";\n  } catch {\n    // không phải absolute -> coi là relative\n    const path = String(u).replace(/^\\/+/, \"\");\n    return base ? `${base}/${path}` : `/${path}`;\n  }\n}\n\n/** Dùng cho preview: hợp nhất normalize + resolve, không ném lỗi */\nexport function previewUrl(raw) {\n  try {\n    const norm = normalizeImgInput(raw);\n    return resolveImg(norm);\n  } catch {\n    return \"\";\n  }\n}","map":{"version":3,"names":["MAX_IMAGEURL","CDN_BASE","_import$meta","import","meta","env","VITE_CDN_BASE","process","REACT_APP_CDN_BASE","smartUnwrapShareUrl","s","mDrive","match","test","replace","normalizeImgInput","raw","String","trim","length","Error","toLowerCase","startsWith","resolveImg","u","base","url","URL","protocol","path","previewUrl","norm"],"sources":["D:/CMC_Task/third-task/fe/category/src/lib/img.js"],"sourcesContent":["// src/lib/img.js\r\nexport const MAX_IMAGEURL = 1024;\r\n\r\nexport const CDN_BASE =\r\n  (import.meta?.env && import.meta.env.VITE_CDN_BASE) ||\r\n  (typeof process !== \"undefined\" && process.env.REACT_APP_CDN_BASE) ||\r\n  \"\";\r\n\r\n/** Nếu link là share của Drive/Dropbox -> đổi sang link trực tiếp xem/ tải */\r\nfunction smartUnwrapShareUrl(s) {\r\n  // Google Drive: https://drive.google.com/file/d/<id>/view?usp=sharing\r\n  const mDrive = s.match(/drive\\.google\\.com\\/file\\/d\\/([^/]+)/i);\r\n  if (mDrive) return `https://drive.google.com/uc?export=view&id=${mDrive[1]}`;\r\n\r\n  // Dropbox: https://www.dropbox.com/s/<id>/file.jpg?dl=0 -> raw\r\n  if (/^https?:\\/\\/www\\.dropbox\\.com\\//i.test(s)) {\r\n    return s.replace(\"www.dropbox.com\", \"dl.dropboxusercontent.com\").replace(/(\\?|&)dl=\\d/, \"\");\r\n  }\r\n  return s;\r\n}\r\n\r\n/** Chuẩn hoá input để lưu vào DB (string ngắn, không base64, có scheme nếu cần) */\r\nexport function normalizeImgInput(raw) {\r\n  if (!raw) return \"\";\r\n  let s = String(raw).trim();\r\n  if (!s) return \"\";\r\n  if (s.length > MAX_IMAGEURL) throw new Error(\"too_long\");\r\n  if (s.toLowerCase().startsWith(\"data:\")) throw new Error(\"no_data_uri\");\r\n  if (/^file:|^[a-z]:\\\\|^\\\\\\\\/i.test(s)) throw new Error(\"no_local_path\");\r\n\r\n  // protocol-relative => thêm https:\r\n  if (/^\\/\\//.test(s)) s = \"https:\" + s;\r\n\r\n  // nếu đã có scheme (http/https/ftp...) -> giữ (ưu tiên http/https)\r\n  if (/^[a-z][a-z0-9+.-]*:\\/\\//i.test(s)) {\r\n    if (!/^https?:\\/\\//i.test(s)) throw new Error(\"unsupported_scheme\");\r\n    return smartUnwrapShareUrl(s);\r\n  }\r\n\r\n  // domain trần: example.com/abc.jpg -> thêm https://\r\n  if (/^[\\w.-]+\\.[a-z]{2,}(\\/.*)?$/i.test(s)) return smartUnwrapShareUrl(\"https://\" + s);\r\n\r\n  // còn lại coi như đường dẫn tương đối (images/a.jpg)\r\n  return s.replace(/^\\/+/, \"\"); // bỏ bớt / đầu nếu muốn\r\n}\r\n\r\n/** Ghép link hiển thị (đường dẫn tương đối -> CDN_BASE, còn lại giữ nguyên) */\r\nexport function resolveImg(u) {\r\n  if (!u) return \"\";\r\n  const base = String(CDN_BASE || \"\").replace(/\\/+$/, \"\");\r\n  try {\r\n    const url = new URL(u);\r\n    return url.protocol === \"http:\" || url.protocol === \"https:\" ? u : \"\";\r\n  } catch {\r\n    // không phải absolute -> coi là relative\r\n    const path = String(u).replace(/^\\/+/, \"\");\r\n    return base ? `${base}/${path}` : `/${path}`;\r\n  }\r\n}\r\n\r\n/** Dùng cho preview: hợp nhất normalize + resolve, không ném lỗi */\r\nexport function previewUrl(raw) {\r\n  try {\r\n    const norm = normalizeImgInput(raw);\r\n    return resolveImg(norm);\r\n  } catch {\r\n    return \"\";\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}